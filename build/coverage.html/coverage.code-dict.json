{"/home/travis/build/npmtest/node-npmtest-bitcoin/test.js":"/* istanbul instrument in package npmtest_bitcoin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bitcoin/lib.npmtest_bitcoin.js":"/* istanbul instrument in package npmtest_bitcoin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bitcoin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bitcoin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bitcoin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bitcoin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bitcoin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bitcoin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bitcoin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_bitcoin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bitcoin.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_bitcoin.__dirname +\n                    '/lib.npmtest_bitcoin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bitcoin/node_modules/bitcoin/lib/index.js":"var commands = require('./commands')\nvar rpc = require('./jsonrpc')\n\n// ===----------------------------------------------------------------------===//\n// Client\n// ===----------------------------------------------------------------------===//\nfunction Client (opts) {\n  this.rpc = new rpc.Client(opts)\n}\n\n// ===----------------------------------------------------------------------===//\n// cmd\n// ===----------------------------------------------------------------------===//\nClient.prototype.cmd = function () {\n  var args = [].slice.call(arguments)\n  var cmd = args.shift()\n\n  callRpc(cmd, args, this.rpc)\n}\n\n// ===----------------------------------------------------------------------===//\n// callRpc\n// ===----------------------------------------------------------------------===//\nfunction callRpc (cmd, args, rpc) {\n  var fn = args[args.length - 1]\n\n  // If the last argument is a callback, pop it from the args list\n  if (typeof fn === 'function') {\n    args.pop()\n  } else {\n    fn = function () {}\n  }\n\n  rpc.call(cmd, args, function () {\n    var args = [].slice.call(arguments)\n    args.unshift(null)\n    fn.apply(this, args)\n  }, function (err) {\n    fn(err)\n  })\n}\n\n// ===----------------------------------------------------------------------===//\n// Initialize wrappers\n// ===----------------------------------------------------------------------===//\n(function () {\n  for (var protoFn in commands) {\n    (function (protoFn) {\n      Client.prototype[protoFn] = function () {\n        var args = [].slice.call(arguments)\n        callRpc(commands[protoFn], args, this.rpc)\n      }\n    })(protoFn)\n  }\n})()\n\n// Export!\nmodule.exports.Client = Client\n","/home/travis/build/npmtest/node-npmtest-bitcoin/node_modules/bitcoin/lib/commands.js":"module.exports = {\n  addMultiSigAddress: 'addmultisigaddress',\n  addNode: 'addnode', // bitcoind v0.8.0+\n  backupWallet: 'backupwallet',\n  createMultiSig: 'createmultisig',\n  createRawTransaction: 'createrawtransaction', // bitcoind v0.7.0+\n  decodeRawTransaction: 'decoderawtransaction', // bitcoind v0.7.0+\n  decodeScript: 'decodescript',\n  dumpPrivKey: 'dumpprivkey',\n  dumpWallet: 'dumpwallet', // bitcoind v0.9.0+\n  encryptWallet: 'encryptwallet',\n  estimateFee: 'estimatefee', // bitcoind v0.10.0x\n  estimatePriority: 'estimatepriority', // bitcoind v0.10.0+\n  generate: 'generate', // bitcoind v0.11.0+\n  getAccount: 'getaccount',\n  getAccountAddress: 'getaccountaddress',\n  getAddedNodeInfo: 'getaddednodeinfo', // bitcoind v0.8.0+\n  getAddressesByAccount: 'getaddressesbyaccount',\n  getBalance: 'getbalance',\n  getBestBlockHash: 'getbestblockhash', // bitcoind v0.9.0+\n  getBlock: 'getblock',\n  getBlockchainInfo: 'getblockchaininfo', // bitcoind v0.9.2+\n  getBlockCount: 'getblockcount',\n  getBlockHash: 'getblockhash',\n  getBlockTemplate: 'getblocktemplate', // bitcoind v0.7.0+\n  getChainTips: 'getchaintips', // bitcoind v0.10.0+\n  getConnectionCount: 'getconnectioncount',\n  getDifficulty: 'getdifficulty',\n  getGenerate: 'getgenerate',\n  getInfo: 'getinfo',\n  getMempoolInfo: 'getmempoolinfo', // bitcoind v0.10+\n  getMiningInfo: 'getmininginfo',\n  getNetTotals: 'getnettotals',\n  getNetworkInfo: 'getnetworkinfo', // bitcoind v0.9.2+\n  getNetworkHashPs: 'getnetworkhashps', // bitcoind v0.9.0+\n  getNewAddress: 'getnewaddress',\n  getPeerInfo: 'getpeerinfo', // bitcoind v0.7.0+\n  getRawChangeAddress: 'getrawchangeaddress', // bitcoin v0.9+\n  getRawMemPool: 'getrawmempool', // bitcoind v0.7.0+\n  getRawTransaction: 'getrawtransaction', // bitcoind v0.7.0+\n  getReceivedByAccount: 'getreceivedbyaccount',\n  getReceivedByAddress: 'getreceivedbyaddress',\n  getTransaction: 'gettransaction',\n  getTxOut: 'gettxout', // bitcoind v0.7.0+\n  getTxOutProof: 'gettxoutproof', // bitcoind v0.11.0+\n  getTxOutSetInfo: 'gettxoutsetinfo', // bitcoind v0.7.0+\n  getUnconfirmedBalance: 'getunconfirmedbalance', // bitcoind v0.9.0+\n  getWalletInfo: 'getwalletinfo', // bitcoind v0.9.2+\n  help: 'help',\n  importAddress: 'importaddress', // bitcoind v0.10.0+\n  importPrivKey: 'importprivkey',\n  importWallet: 'importwallet', // bitcoind v0.9.0+\n  keypoolRefill: 'keypoolrefill',\n  keyPoolRefill: 'keypoolrefill',\n  listAccounts: 'listaccounts',\n  listAddressGroupings: 'listaddressgroupings', // bitcoind v0.7.0+\n  listLockUnspent: 'listlockunspent', // bitcoind v0.8.0+\n  listReceivedByAccount: 'listreceivedbyaccount',\n  listReceivedByAddress: 'listreceivedbyaddress',\n  listSinceBlock: 'listsinceblock',\n  listTransactions: 'listtransactions',\n  listUnspent: 'listunspent', // bitcoind v0.7.0+\n  lockUnspent: 'lockunspent', // bitcoind v0.8.0+\n  move: 'move',\n  ping: 'ping', // bitcoind v0.9.0+\n  prioritiseTransaction: 'prioritisetransaction', // bitcoind v0.10.0+\n  sendFrom: 'sendfrom',\n  sendMany: 'sendmany',\n  sendRawTransaction: 'sendrawtransaction', // bitcoind v0.7.0+\n  sendToAddress: 'sendtoaddress',\n  setAccount: 'setaccount',\n  setGenerate: 'setgenerate',\n  setTxFee: 'settxfee',\n  signMessage: 'signmessage',\n  signRawTransaction: 'signrawtransaction', // bitcoind v0.7.0+\n  stop: 'stop',\n  submitBlock: 'submitblock', // bitcoind v0.7.0+\n  validateAddress: 'validateaddress',\n  verifyChain: 'verifychain', // bitcoind v0.9.0+\n  verifyMessage: 'verifymessage',\n  verifyTxOutProof: 'verifytxoutproof', // bitcoind v0.11.0+\n  walletLock: 'walletlock',\n  walletPassphrase: 'walletpassphrase',\n  walletPassphraseChange: 'walletpassphrasechange'\n}\n","/home/travis/build/npmtest/node-npmtest-bitcoin/node_modules/bitcoin/lib/jsonrpc.js":"var http = require('http')\nvar https = require('https')\n\nvar Client = function (opts) {\n  this.opts = opts || {}\n  this.http = this.opts.ssl ? https : http\n}\n\nClient.prototype.call = function (method, params, callback, errback, path) {\n  var time = Date.now()\n  var requestJSON\n\n  if (Array.isArray(method)) {\n    // multiple rpc batch call\n    requestJSON = []\n    method.forEach(function (batchCall, i) {\n      requestJSON.push({\n        id: time + '-' + i,\n        method: batchCall.method,\n        params: batchCall.params\n      })\n    })\n  } else {\n    // single rpc call\n    requestJSON = {\n      id: time,\n      method: method,\n      params: params\n    }\n  }\n\n  // First we encode the request into JSON\n  requestJSON = JSON.stringify(requestJSON)\n\n  // prepare request options\n  var requestOptions = {\n    host: this.opts.host || 'localhost',\n    port: this.opts.port || 8332,\n    method: 'POST',\n    path: path || '/',\n    headers: {\n      'Host': this.opts.host || 'localhost',\n      'Content-Length': requestJSON.length\n    },\n    agent: false,\n    rejectUnauthorized: this.opts.ssl && this.opts.sslStrict !== false\n  }\n\n  if (this.opts.ssl && this.opts.sslCa) {\n    requestOptions.ca = this.opts.sslCa\n  }\n\n  // use HTTP auth if user and password set\n  if (this.opts.user && this.opts.pass) {\n    requestOptions.auth = this.opts.user + ':' + this.opts.pass\n  }\n\n  // Now we'll make a request to the server\n  var cbCalled = false\n  var request = this.http.request(requestOptions)\n\n  // start request timeout timer\n  var reqTimeout = setTimeout(function () {\n    if (cbCalled) return\n    cbCalled = true\n    request.abort()\n    var err = new Error('ETIMEDOUT')\n    err.code = 'ETIMEDOUT'\n    errback(err)\n  }, this.opts.timeout || 30000)\n\n  // set additional timeout on socket in case of remote freeze after sending headers\n  request.setTimeout(this.opts.timeout || 30000, function () {\n    if (cbCalled) return\n    cbCalled = true\n    request.abort()\n    var err = new Error('ESOCKETTIMEDOUT')\n    err.code = 'ESOCKETTIMEDOUT'\n    errback(err)\n  })\n\n  request.on('error', function (err) {\n    if (cbCalled) return\n    cbCalled = true\n    clearTimeout(reqTimeout)\n    errback(err)\n  })\n\n  request.on('response', function (response) {\n    clearTimeout(reqTimeout)\n\n    // We need to buffer the response chunks in a nonblocking way.\n    var buffer = ''\n    response.on('data', function (chunk) {\n      buffer = buffer + chunk\n    })\n    // When all the responses are finished, we decode the JSON and\n    // depending on whether it's got a result or an error, we call\n    // emitSuccess or emitError on the promise.\n    response.on('end', function () {\n      var err\n\n      if (cbCalled) return\n      cbCalled = true\n\n      try {\n        var decoded = JSON.parse(buffer)\n      } catch (e) {\n        if (response.statusCode !== 200) {\n          err = new Error('Invalid params, response status code: ' + response.statusCode)\n          err.code = -32602\n          errback(err)\n        } else {\n          err = new Error('Problem parsing JSON response from server')\n          err.code = -32603\n          errback(err)\n        }\n        return\n      }\n\n      if (!Array.isArray(decoded)) {\n        decoded = [decoded]\n      }\n\n      // iterate over each response, normally there will be just one\n      // unless a batch rpc call response is being processed\n      decoded.forEach(function (decodedResponse, i) {\n        if (decodedResponse.hasOwnProperty('error') && decodedResponse.error != null) {\n          if (errback) {\n            err = new Error(decodedResponse.error.message || '')\n            if (decodedResponse.error.code) {\n              err.code = decodedResponse.error.code\n            }\n            errback(err)\n          }\n        } else if (decodedResponse.hasOwnProperty('result')) {\n          if (callback) {\n            callback(decodedResponse.result, response.headers)\n          }\n        } else {\n          if (errback) {\n            err = new Error(decodedResponse.error.message || '')\n            if (decodedResponse.error.code) {\n              err.code = decodedResponse.error.code\n            }\n            errback(err)\n          }\n        }\n      })\n    })\n  })\n  request.end(requestJSON)\n}\n\nmodule.exports.Client = Client\n"}